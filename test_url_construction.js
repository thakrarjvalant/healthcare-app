// Test to check what URLs are being generated by the ApiService

// Mock localStorage for testing
const localStorage = {
  getItem: (key) => {
    if (key === 'token') return 'admin-token';
    return null;
  }
};

// Mock window for testing
const window = {
  location: {
    origin: 'http://localhost:3000'
  }
};

// Import or recreate the relevant parts of ApiService for testing
function getApiBaseUrl(service = 'main') {
  // Always try environment variables first, regardless of service type
  if (process.env.REACT_APP_USER_SERVICE_BASE_URL && service === 'user') {
    return process.env.REACT_APP_USER_SERVICE_BASE_URL;
  }
  
  if (process.env.REACT_APP_API_BASE_URL && service === 'main') {
    return process.env.REACT_APP_API_BASE_URL;
  }
  
  if (process.env.REACT_APP_ADMIN_UI_BASE_URL && service === 'admin') {
    return process.env.REACT_APP_ADMIN_UI_BASE_URL;
  }
  
  // Use current origin for relative URLs only as a last resort
  // But ensure we're pointing to the correct API port (8000)
  if (typeof window !== 'undefined') {
    const currentOrigin = window.location.origin;
    // If we're running on localhost:3000 (frontend dev server), 
    // redirect API calls to localhost:8000 (API gateway)
    if (currentOrigin.includes('localhost:3000')) {
      if (service === 'user') {
        return 'http://localhost:8000/api/users';
      }
      if (service === 'admin') {
        return 'http://localhost:8007';
      }
      return 'http://localhost:8000/api';
    }
    
    // For other cases, use relative paths
    if (service === 'user') {
      return `${currentOrigin}/api/users`;
    }
    if (service === 'admin') {
      return `${currentOrigin}`;
    }
    return `${currentOrigin}/api`;
  }
  
  // Fallback to localhost
  if (service === 'user') {
    return 'http://localhost:8000/api/users';
  }
  if (service === 'admin') {
    return 'http://localhost:8007';
  }
  return 'http://localhost:8000/api';
}

const API_BASE_URL = getApiBaseUrl();
const ADMIN_UI_BASE_URL = getApiBaseUrl('admin');

console.log('API_BASE_URL:', API_BASE_URL);
console.log('ADMIN_UI_BASE_URL:', ADMIN_UI_BASE_URL);

// Test URL construction for admin endpoints
const url = '/admin/users';
const isAdminEndpoint = url.startsWith('/admin/');
console.log('URL:', url);
console.log('Is admin endpoint:', isAdminEndpoint);

let baseURL = API_BASE_URL;
if (isAdminEndpoint) {
  baseURL = ADMIN_UI_BASE_URL;
}

const fullUrl = baseURL + url;
console.log('Full URL:', fullUrl);

// Test for roles endpoint
const rolesUrl = '/admin/roles';
const isRolesAdminEndpoint = rolesUrl.startsWith('/admin/');
console.log('Roles URL:', rolesUrl);
console.log('Is roles admin endpoint:', isRolesAdminEndpoint);

let rolesBaseURL = API_BASE_URL;
if (isRolesAdminEndpoint) {
  rolesBaseURL = ADMIN_UI_BASE_URL;
}

const fullRolesUrl = rolesBaseURL + rolesUrl;
console.log('Full roles URL:', fullRolesUrl);